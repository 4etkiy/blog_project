<?php
//Command Line Interface (CLI) – интерфейс командной строки.CLI позволяет запускать программы на PHP не через
// клиент-серверную архитектуру, а как простые программы в командной строке.

//по отладке
// нажмём F9 программа продолжит выполнение до следующего брэйкпоинта.
// “F8” осуществляет выполнение кода на текущей строке и останавливается перед следующим действием.
//если нам нужно будет попасть внутрь функции, то нужно будет нажать F7,


//cron  - программа, планировщик задач, с помощью которого можно запускать скрипт по расписанию
//нужно в специальный конфигурационный файл этой программы прописать нужные настройки.
// В этом файле настроек действует простое правило – одна строчка в файле = одно запланированное действие.
//
//Каждая строка состоит при этом из двух частей:
//
//Расписание, по которому нужно что-то выполнить;
//Команда, которую нужно выполнять.
//
//пример файла конфигурации для cron:
//0 0 * * * php c:\OSPanel\domains\phpZone\public_html\bin\cli.php Minusator -x=20 -y=17
//Где цифры обозначают:
//
//0 0 * * * команда_для_запуска
//| | | | |
//| | | | - День недели (0 - 7) (воскресенье = 0 или 7)
//| | | --- Месяц (1 - 12)
//| | --- День месяца (1 - 31)
//| ---- Час (0 - 23)
//----- Минута (0 - 59)
//В нашем примере команда будет запускаться каждый день каждого месяца в 00:00. Звездочки – значит «каждый» час, день
//Если 1-го числа каждого месяца в 04:20, то:
//
//20 4 1 * * команда_для_запуска
//
//Слэш (/)
//*/20 * * * * команда_для_запуска
//С помощью слэша можно задать периодичность выполнения. Команда выше будет запускаться каждые 20 минут.
//Запятая (,)
//1,10,20 * * * * команда_для_запуска
//С помощью запятой можно просто перечислить значения. Команда выше будет запускаться в первую, десятую и двадцатую минуту каждого часа.
//Тире (-)
//* 9-17 * * * команда_для_запуска
//С помощью тире можно указать диапазон. Команда выше будет запускаться каждую минуту с 9:00 до 17:59.
//OpenServer есть своя реализация cron.
//
//Для этого нужно зайти в настройки OpenServer и перейти во вкладку «Планировщик заданий».
//php C:\OpenServer\domains\phpZone\public_html\bin\cli.php TestCron -x=20 -y=17
//
//Есть задача - нужно запускать php-скрипт каждые 20 секунд. Как это сделать?
//***** php C:\OpenServer\domains\phpZone\public_html\bin\cli.php TestCron -x=20 -y=17
//***** (timeout /t 20) && php C:\OpenServer\domains\phpZone\public_html\bin\cli.php TestCron -x=20 -y=17
//***** (timeout /t 20) && php C:\OpenServer\domains\phpZone\public_html\bin\cli.php TestCron -x=20 -y=17

//Ознакомиться со всеми актуальными PSR стандартами на сегодняшний день вы можете на этой страничке - https://www.php-fig.org/psr/.
//
//PSR-1: Basic Coding Standard
//Данный стандарт описывает элементы, являющиеся необходимыми для обеспечения технической совместимости кода,
//создаваемого или поддерживаемого несколькими разработчиками.
//
//PSR-2: Coding Style Guide
//Этот стандарт расширяет вышеописанный. Он призван уменьшить сложность восприятия кода, написанного разными авторами.
//Это достигается путём внедрения правил относительно форматирования PHP-кода.
//
//PSR-4: Autoloader
//Данный стандарт описывает то, как должна быть реализована автозагрузка классов –
//неймспейсы должны соответствовать директориям и ещё некоторые детали.


//нам нужно выполнить команду в директории с нашим проектом (не забудьте в нее перейти с помощью команды cd) команду: composer init
//https://packagist.org/packages/erusev/parsedown  репозиторий пакетов Packagist
//Для того, чтобы установить пакет, используется команда:    composer require вендор/имя_пакета
//Конкретно в нашем случае команда будет: composer require erusev/parsedown
//папка vendor – здесь хранятся все пакеты, которые были скачаны composer-ом.

//Кроме того, что композер создает файл с автозагрузкой для библиотек, он позволяет включить в эту автозагрузку еще и файлы нашего проекта.
// Для этого нужно в composer.json:
//указать стандарт, который используется для автозагрузки. В нашем случае – PSR-4.
//указать корневую папку и неймспейс для проекта.
//{
//    "name": "ivashkevich/myproject",
//    "type": "project",
//    "license": "proprietary",
//    "authors": [
//        {
//            "name": "Artyom Ivashkevich",
//            "email": "x@php.zone"
//        }
//    ],
//    "autoload": {
//        "psr-4": {
//            "MyProject\\": "src/MyProject/"
//        }
//    },    "require": {
//        "erusev/parsedown": "^1.7"
//    }
//
//После этого следует выполнить команду: composer install
//Эта команда устанавливает все заданные нами ранее зависимости (если они еще не установлены) и перегенерирует файл автозагрузки.
// После этого нужно в наших фронт-контроллерах убрать функции автозагрузки

//composer.lock -  очень важный файл – в нем содержится конкретная версия пакета,
// которая использовалась в момент выполнения команды composer require.

//В дальнейшем мы не будем выкладывать папку vendor – ведь достаточно выполнить composer install

//сейчас установлена ровно та версия библиотеки, которая задана в composer.lock
//Если же вы хотите обновить какую-то библиотеку – нужно просто выполнить команду: composer update имя_библиотеки

//composer.lock должен всегда сопровождаться вместе с вашим приложением.
// Он – гарантия того, что приложение на сервере будет работать с теми же пакетами, которые вы использовали, когда писали код.
// Он должен быть и в репозитории git вместе с проектом, и на сервере, и у разработчика. Проект и composer.lock должны всегда находиться рядом.